---
- name: Manage system dependencies and dotfiles
  hosts: localhost
  connection: local
  gather_facts: true
  become: false

  vars:
    dotfiles:
      - ".zshrc"
      - ".zshenv"
      - ".p10k.zsh"
      - ".profile"
      - ".oh-my-bash"
      - ".envrc"
      - ".aliasrc"
      - ".bash_eww"
      - ".bash_local"
      - ".bashrc"
      - ".clang-format"
      - ".gitconfig"
      - ".gitignore"
      - ".vim"
      - ".fonts"
      - ".config/fish"
      - ".config/fontconfig"
      - ".config/ghostty"
      - ".config/kitty"
      - ".config/nix"
      - ".config/nvim"
      - ".config/sops"
      - ".config/tmux"
      - ".config/wezterm"
      - ".config/wslu"
      - ".config/zsh"
    dev_dir: "{{ ansible_env.HOME }}/.dev"
    python_version: "3.11"
    node_version: "20"
    go_version: "1.21"
    rust_version: "stable"

  tasks:
    - name: Gather facts without sudo
      setup:
      become: false

    - name: Install system packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - curl
        - wget
        - python3
        - python3-pip
      when: ansible_os_family != "Darwin"

    - name: Install Homebrew packages (macOS)
      homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - curl
        - wget
        - python
        - fish
        - ansible
      when: ansible_os_family == "Darwin"

    - name: Install Python packages (non-macOS)
      pip:
        name: "{{ item }}"
        state: present
      loop:
        - ansible
        - ansible-core
      become: false
      when: ansible_os_family != "Darwin"

    - name: Install Ansible collections
      ansible.builtin.command: ansible-galaxy collection install -r requirements.yml
      args:
        chdir: "{{ playbook_dir }}"
      become: false
      register: ansible_collections_result

    - name: Create backup directory
      file:
        path: "{{ ansible_env.HOME }}/.dotfiles-backup"
        state: directory
        mode: '0755'
      become: false

    - name: Backup existing files and directories
      shell: |
        if [ -e "{{ ansible_env.HOME }}/{{ item }}" ]; then
          mv "{{ ansible_env.HOME }}/{{ item }}" "{{ ansible_env.HOME }}/.dotfiles-backup/{{ item | basename }}_$(date +%Y%m%d_%H%M%S)"
        fi
      loop: "{{ dotfiles }}"
      become: false

    - name: Create symbolic links for dotfiles
      file:
        src: "{{ playbook_dir }}/../{{ item }}"
        dest: "{{ ansible_env.HOME }}/{{ item }}"
        state: link
        force: yes
        follow: false
      loop: "{{ dotfiles }}"
      become: false

    - name: Verify Ansible collections installation
      debug:
        msg: "Ansible collections installed successfully"
      when: ansible_collections_result.rc == 0

    - name: Create development directory
      ansible.builtin.file:
        path: "{{ dev_dir }}"
        state: directory
        mode: '0755'

    - name: Install Python development environment
      block:
        - name: Install pyenv
          ansible.builtin.git:
            repo: https://github.com/pyenv/pyenv.git
            dest: "{{ dev_dir }}/pyenv"
            version: master

        - name: Install Python version
          ansible.builtin.shell: |
            export PYENV_ROOT="{{ dev_dir }}/pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
            pyenv install {{ python_version }}
            pyenv global {{ python_version }}
          args:
            creates: "{{ dev_dir }}/pyenv/versions/{{ python_version }}"

        - name: Install Python packages
          ansible.builtin.pip:
            name:
              - pip
              - virtualenv
              - pip-tools
              - black
              - flake8
              - mypy
              - pytest
            state: present
            executable: "{{ dev_dir }}/pyenv/versions/{{ python_version }}/bin/pip"

    - name: Install Node.js development environment
      block:
        - name: Install nvm
          ansible.builtin.git:
            repo: https://github.com/nvm-sh/nvm.git
            dest: "{{ dev_dir }}/nvm"
            version: master

        - name: Install Node.js version
          ansible.builtin.shell: |
            export NVM_DIR="{{ dev_dir }}/nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install {{ node_version }}
            nvm use {{ node_version }}
          args:
            creates: "{{ dev_dir }}/nvm/versions/node/v{{ node_version }}"

        - name: Install global Node.js packages
          ansible.builtin.npm:
            name:
              - yarn
              - typescript
              - eslint
              - prettier
            global: yes
            state: present

    - name: Install Go development environment
      block:
        - name: Install Go version
          community.general.golang_install:
            version: "{{ go_version }}"
            install_dir: "{{ dev_dir }}/go"
            state: present

        - name: Set up Go environment
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.zshrc"
            line: |
              export GOPATH="{{ dev_dir }}/go"
              export PATH="$GOPATH/bin:$PATH"
            create: yes

    - name: Install Rust development environment
      block:
        - name: Install Rust
          ansible.builtin.shell: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {{ rust_version }}
          args:
            creates: "{{ ansible_env.HOME }}/.cargo/bin/rustc"

        - name: Install Rust tools
          ansible.builtin.shell: |
            source "{{ ansible_env.HOME }}/.cargo/env"
            cargo install cargo-edit cargo-watch cargo-audit cargo-outdated
          args:
            creates: "{{ ansible_env.HOME }}/.cargo/bin/cargo-edit"

    - name: Install Docker
      block:
        - name: Install Docker
          community.general.package:
            name: docker
            state: present

        - name: Start Docker service
          ansible.builtin.service:
            name: docker
            state: started
            enabled: yes

        - name: Add user to docker group
          ansible.builtin.user:
            name: "{{ ansible_env.USER }}"
            groups: docker
            append: yes 